import java.util.Scanner;

public class mergesort {
	int a[];
	public mergesort(int[] a) {
		this.a=a;
	}
	
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter size of array:");
		int size=sc.nextInt();
		int[] a=new int[size];
		System.out.println("Enter elements intoo array:");
		for(int i=0;i<size;i++)
		{
			a[i]=sc.nextInt();
		}
		System.out.println("before sorting:");
		for(int i=0;i<size;i++)
		{
			System.out.println(a[i]);
		}
		mergesort m=new mergesort(a);
		m.mergeSort(0,size-1);
		System.out.println("after sorting:");
		for(int i=0;i<size;i++)
		{
			System.out.println(a[i]);
		}

	}

	void mergeSort(int l, int h) {
		if(l<h)
		{
			int mid=(l+h)/2;
			mergeSort(l,mid);
			mergeSort(mid+1,h);
			merge(l,mid,h);
		}
	}
	void merge(int low ,int mid ,int high)
	{
		int c[]=new int[high+1];
		int l=low,p=low;
		int r=mid+1;
		while(l<=mid &&r<=high)
		{
			if(a[l]<=a[r])
			{
				c[p]=a[l];
				p++;
				l++;
			}else {
				c[p]=a[r];
				p++;
				r++;
			}
		}
		if (l>mid)
		{
			while (r<=high)
			{
				c[p]=a[r];
				p++;
				r++;
			}
		}
		else {
			while (l<=mid) {
				c[p]=a[l];
				p++;
				l++;
			}
		}
		for(int i=low;i<=high;i++)
		{
			a[i]=c[i];
		}
	}
}







import java.util.Scanner;

public class ququedemo 
{	
	int front =-1,rear =-1;
	int n,queue[];
	public ququedemo(int n,int queue[])
	{
		this.n=n;
		this.queue=queue;
	}
	public void enqueue(int ele)
	{
		if(rear==n-1)
		{
			System.out.println("queue is full");
		}
		else
		{
			if(rear==-1)
			{
				front=0;
			}
			rear=rear+1;
			queue[rear]=ele;
			System.out.println("inserted");
		}
	}
	public int dequeue()
	{
		if (front<0)
		{
			System.out.println("queue is empty");
			return 0;
		}
		else
		{
			int ele=queue[front];
			if(rear==front)
			{
				rear=front=-1;
			}
			else {
				front=front+1;
			}
			return ele;
		}
	}
	public void disply()
	{
		if (front<0)
		{
			System.out.println("queueis empty");
		}
		else {
			for(int i=front;i<=rear;i++)
			{
				System.out.println(queue[i]);
			}
		}
	}

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter size of stack:");
		int n=sc.nextInt();
		int queue[]=new int[n];
		ququedemo s=new ququedemo(n,queue);
		while (true)
		{
			System.out.println("1.enqueue 2.dequeue 3.display 4.exit");
			System.out.println("Enter your choice:");
			int ch=sc.nextInt();
			switch(ch)
			{
				case 1: System.out.println("Enter insert element:");
						int ele=sc.nextInt();
						s.enqueue(ele);
						break;
				case 2: System.out.println("delete elemeent:"+s.dequeue());
						break;
				case 3: System.out.println("display elements:");
						s.disply();
						break;
				case 4: return;
			}
		}

	}

}



import java.util.Scanner;

public class quicksort {
	int a[];
	public quicksort(int[] a) {
		// TODO Auto-generated constructor stub
		this.a=a;
	}

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter size of array:");
		int size=sc.nextInt();
		int[] a=new int[size];
		System.out.println("Enter elements intoo array:");
		for(int i=0;i<size;i++)
		{
			a[i]=sc.nextInt();
		}
		System.out.println("before sorting:");
		for(int i=0;i<size;i++)
		{
			System.out.println(a[i]);
		}
		quicksort m=new quicksort(a);
		m.quickSort(0,size-1);
		System.out.println("after sorting:");
		for(int i=0;i<size;i++)
		{
			System.out.println(a[i]);
		}
		
	}
	void quickSort(int l,int h)
	{
		if(l<h)
		{
			int pivot=partition(l,h);
			quickSort(l,pivot-1);
			quickSort(pivot+1,h);
		}
	}
	int partition(int low,int high)
	{
		int pivot=a[low];
		int l=low;
		int h=high;
		while(l<h)
		{
			while(a[l]<=pivot && l<high)
			{
				l++;
			}
			while(a[h]>pivot && h>low)
			{
				h--;
			}
			if(l<h)
			{
				int temp=a[l];
				a[l]=a[h];
				a[h]=temp;
			}
		}
		a[low]=a[h];
		a[h]=pivot;
		return h;
	}
}


import java.util.*;
public class stackdemo 
{
	int top=-1,n,stack[];
	public stackdemo(int n,int stack[])
	{
		this.n=n;
		this.stack=stack;
	}
	public void insert(int ele)
	{
		if(top==n-1)
		{
			System.out.println("stack is full");
		}
		else
		{
			top=top+1;
			stack[top]=ele;
			System.out.println("inserted");
		}
	}
	public int delete()
	{
		if (top<0)
		{
			System.out.println("Stack is empty");
			return 0;
		}
		else
		{
			int ele=stack[top];
			top=top-1;
			return ele;
		}
	}
	public void disply()
	{
		if (top<0)
		{
			System.out.println("Stack is empty");
		}
		else {
			for(int i=top;i>=0;i--)
			{
				System.out.println(stack[i]);
			}
		}
	}
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter size of stack:");
		int n=sc.nextInt();
		int stack[]=new int[n];
		stackdemo s=new stackdemo(n,stack);
		while (true)
		{
			System.out.println("1.insert 2.delete 3.display 4.exit");
			System.out.println("Enter your choice:");
			int ch=sc.nextInt();
			switch(ch)
			{
				case 1: System.out.println("Enter insert element:");
						int ele=sc.nextInt();
						s.insert(ele);
						break;
				case 2: System.out.println("delete elemeent:"+s.delete());
						break;
				case 3: System.out.println("display elements:");
						s.disply();
						break;
				case 4: return;
			}
		}
	}

}




class Node
{
	int data;
	Node left,right;
	public Node(int data)
	{
		this.data=data;
		left=right=null;
	}
}
class Tree
{
	Node root;
	void preoder(Node root)
	{
		if (root==null)
		{

			return;
		}
		System.out.print(root.data+" ");
		preoder(root.left);
		preoder(root.right);
	}
	void inoder(Node root)
	{
		if (root==null)
		{
		
			return;
		}
		inoder(root.left);
		System.out.print(root.data+" ");
		inoder(root.right);
	}
	void postoder(Node root)
	{
		if (root==null)
		{
		
			return;
		}
		postoder(root.left);
		postoder(root.right);
		System.out.print(root.data+" ");
	}
}
public class travelsal {

	public static void main(String[] args) {
		Tree t=new Tree();
		t.root=new Node(30);
		t.root.left=new Node(20);
		t.root.right=new Node(40);
		t.root.left.left=new Node(10);
		t.root.left.right=new Node(15);
		t.root.right.right=new Node(50);
		System.out.println("preorder:");
		t.preoder(t.root);
		System.out.println("inorder");
		t.inoder(t.root);
		System.out.println("postorder");
		t.postoder(t.root);

	}

}




import java.util.*;
public class dynamicknap 
{		
		int n,c;
		int w[],p[],v[][];
		public dynamicknap(int n,int c,int w[],int p[])
		{
			this.n=n;
			this.c=c;
			this.w=w;
			this.p=p;
			v=new int[n+1][c+1];
		}
		public void compute()
		{
			for(int i=0;i<=n;i++)
			{
				for(int j=0;j<=c;j++)
				{
					if(i==0||j==0)
					{
						v[i][j]=0;
					}
					else if(j-w[i]<0)
					{
						v[i][j]=v[i-1][j];
					}
					else if(j-w[i]>=0)
					{
						v[i][j]=max(v[i-1][j],p[i]+v[i-1][j-w[i]]);
					}
				}
			}
			System.out.println("otimal solution:"+v[n][c]);
			traceback();
		}
		int max(int i,int j)
		{
			if(i>j)
			{
				return i;
			}
			else
			{
				return j;
			}
		}
		void traceback()
		{
			int i=n;
			int j=c;
			while (i>0)
			{
				if (v[i][j]!=v[i-1][j])
				{
					System.out.println(i+" ");
					j=j-w[i];
					i=i-1;
				}
				else
				{
					i=i-1;
				}
			}
		}
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("Entr no of objects:");
		int n =sc.nextInt();
		System.out.println("Entr capit");
		int c=sc.nextInt();
		int w[]=new int[n+1];
		int p[]=new int[n+1];
		System.out.println("Enter weigth");
		for (int i=1;i<=n;i++)
		{
			w[i]=sc.nextInt();
		}
		System.out.println("Enter profit");
		for (int i=1;i<=n;i++)
		{
			p[i]=sc.nextInt();
		}
		dynamicknap d=new dynamicknap(n, c, w, p);
		d.compute();
	}

}



import java.util.Scanner;

public class greedyknap 
{	
	int n,c,i;
	double w[],p[];
	public greedyknap(int n,int c,double w[],double p[])
	{
		this.n=n;
		this.c=c;
		this.w=w;
		this.p=p;
	}
	void compute()
	{
		double x[]=new double[n];
		for(int j=0;i<n;i++)
		{
			x[j]=0.0;
		}
		double rc=c;
		for(i=0;i<n;i++)
		{
			if (w[i]>rc)
			{
				break;
			}
			x[i]=1;
			//System.out.println("netprofit:");
			rc=rc-w[i];
		}
		if (rc>0)
		{
			x[i]=rc/w[i];
			System.out.println("netprofit1:");
		}
		double net=0.0;
		for(int j=0;j<n;j++)
		{
			if (x[j]>0.0)
			{
				net=net+x[j]*p[j];
			}
		}
		System.out.println("netprofit:"+net);
		for(int j=0;j<n;j++)
		{
			System.out.println(x[j]);
		}
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("Entr no of objects:");
		int n =sc.nextInt();
		System.out.println("Entr capit");
		int c=sc.nextInt();
		double w[]=new double[n];
		double p[]=new double[n];
		System.out.println("Enter weigth");
		for (int i=0;i<n;i++)
		{
			w[i]=sc.nextDouble();
		}
		System.out.println("Enter profit");
		for (int i=0;i<n;i++)
		{
			p[i]=sc.nextDouble();
		}
		greedyknap k=new greedyknap(n,c,w,p);
		k.compute();
	}

}



import java.lang.reflect.Array;
import java.util.*;
public class Dijkstra {
	int n,src,u;
	int cost[][];
	int dist[];
	public Dijkstra(int n,int src,int cost[][],int dist[])
	{
		this.n=n;
		this.src=src;
		this.cost=cost;
		this.dist=dist;
	}
	void compute()
	{
		int vis[]=new int[n];
		for(int i=0;i<n;i++)
		{
			vis[i]=0;
			dist[i]=cost[src][i];
		}
		vis[src]=1;
		dist[src]=0;
		for(int i=0;i<n;i++)
		{
			if (i==src)
				continue;
			int min=999;
			for(int j=0;j<n;j++)
			{
				if (vis[j]==0 && min>dist[j] )
				{
					min=dist[j];
					u=j;
				}
			}
			vis[u]=1;
			for(int j=0;j<n;j++)
			{
				if (vis[j]==0)
				{
					if(dist[j]>dist[u]+cost[u][j])
					{
						dist[j]=dist[u]+cost[u][j];
					}
				}
			}
		}
	}
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter no of vertex:");
		int n=sc.nextInt();
		System.out.println("Enter src:");
		int src=sc.nextInt();
		int cost[][]=new int[n][n];
		int dist[]=new int[n];
		Arrays.fill(dist,0);
		for(int i=0;i<n;i++)
		{
			for (int j=0;j<n;j++)
			{
				cost[i][j]=sc.nextInt();
			}
		}
		Dijkstra d=new Dijkstra(n,src,cost, dist);
		d.compute();
		System.out.println("distance from"+src+"to :");
		for(int i=0;i<n;i++)
		{
			System.out.println("to"+i+"is"+dist[i]);
		}
	}

}



import java.util.*;
public class kruskhal
{
	int n,ne,u,v,minc,a,b;
	int cost[][],parent[];
	public kruskhal(int n,int cost[][])
	{
		this.n=n;
		this.cost=cost;
		parent=new int[n+1];
	}
	void compute()
	{
		ne=1;
		while (ne<n)
		{
			int min=999;
			for(int i=1;i<=n;i++)
			{
				for(int j=1;j<=n;j++)
				{
					if(min>cost[i][j])
					{
						min=cost[i][j];
						a=u=i;
						b=v=j;
					}
				}
			}
			u=find(u);
			v=find(v);
			if(u!=v)
			{
				System.out.println(ne+"edge"+a+" "+b+" " +" "+min);
				minc=minc+min;
				uni(u,v);
				ne=ne+1;
				
			}
			
			cost[a][b]=cost[b][a]=999;
		}
		System.out.println(minc);
	}
	int find(int i)
	{
		while(parent[i]!=0)
		{
			i=parent[i];
		}
		return i;
	}
	void uni(int i,int j)
	{
		parent[j]=i;
	}
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("enter no of vertex:");
		int n=sc.nextInt();
		int cost[][]=new int[n+1][n+1];
		//int parent[]=new int[n+1];
		for(int i=1;i<=n;i++)
		{
			for(int j=1;j<=n;j++)
			{
				cost[i][j]=sc.nextInt();
				if (cost[i][j]==0)
				{
					cost[i][j]=999;
				}
			}
		}
		kruskhal k=new kruskhal(n,cost);
		k.compute();
		
	}

}



import java.util.Scanner;

public class prime {
	int n,u,v,a,b,ne,minc;
	int cost[][],vist[];
	public prime(int n,int cost[][])
	{
		this.n=n;
		this.cost=cost;
	}
	void compute()
	{
		vist=new int[n+1];
		for(int i=1;i<=n;i++)
		{
			vist[i]=0;
		}
		vist[1]=1;
		ne=1;
		while (ne<n)
		{
			int min=999;
			for(int i=1;i<=n;i++)
			{
				for(int j=1;j<=n;j++)
				{
					if(min>cost[i][j])
					{
						if(vist[i]==0)
						{
							continue;
						}
						else {
						min=cost[i][j];
						a=u=i;
						b=v=j;
						}
					}
				}
			}
			if(vist[u]==0||vist[v]==0)
			{
				System.out.println(ne+"edge"+a+" "+b+" " +" "+min);
				minc=minc+min;
				ne=ne+1;
				vist[v]=1;
			}
			cost[a][b]=cost[b][a]=999;
		}
		
	}
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("enter no of vertex:");
		int n=sc.nextInt();
		int cost[][]=new int[n+1][n+1];
		//int parent[]=new int[n+1];
		for(int i=1;i<=n;i++)
		{
			for(int j=1;j<=n;j++)
			{
				cost[i][j]=sc.nextInt();
				if (cost[i][j]==0)
				{
					cost[i][j]=999;
				}
			}
		}
		prime p=new prime(n,cost);
		p.compute();
	}

}



import java.util.Scanner;

public class floyds 
{	
	int n;
	int cost[][];
	public floyds(int n,int cost[][])
	{
		this.n=n;
		this.cost=cost;
	}
	void compute()
	{
		for(int k=1;k<=n;k++)
		{
			for(int i=1;i<=n;i++)
			{
				for(int j=1;j<=n;j++)
				{
					cost[i][j]=min(cost[i][j],cost[i][k]+cost[k][j]);
				}
			}
		}
		System.out.println("all-pair");
		for(int i=1;i<=n;i++)
		{
			for(int j=1;j<=n;j++)
			{
				System.out.print(cost[i][j]+" ");
			}
			System.out.println();
		}
	}
	int min(int i,int j)
	{
		if (i<j)
		{
			return i;
		}
		else
		{
			return j;
		}
	}

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("enter no of vertex:");
		int n=sc.nextInt();
		int cost[][]=new int[n+1][n+1];
		for(int i=1;i<=n;i++)
		{
			for(int j=1;j<=n;j++)
			{
				cost[i][j]=sc.nextInt();
				
			}
		}
		floyds f=new floyds(n, cost);
		f.compute();
	}

}



import java.util.*;
public class sumofsubset 
{	
	int n,total,sum;
	int w[],x[];
	public sumofsubset(int n,int total,int sum,int w[])
	{
		this.n=n;
		this.sum=sum;
		this.total=total;
		this.w=w;
		x=new int[n+1];
	}
	void compute(int s,int k,int total)
	{
		x[k]=1;
		if (s+w[k]==sum)
		{
			System.out.println("the subset:");
			for(int i=1;i<=k;i++)
			{
				if(x[i]==1)
				{
					System.out.println(w[i]);
				}
			}
		}
		else if(s+w[k]+w[k+1]<=sum)
		{
			compute(s+w[k],k+1,total-w[k]);
		}
		if (s+total-w[k]>=sum&&s+w[k+1]<=sum)
		{
			x[k]=0;
			compute(s,k+1,total-w[k]);
		}
	}
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int total=0;
		System.out.println("Enter no of objects:");
		int n=sc.nextInt();
		int w[]=new int[n+1];
		System.out.println("Enter weigth ;");
		for(int i=1;i<=n;i++)
		{
			w[i]=sc.nextInt();
			total=total+w[i];
		}
		System.out.println("Enter sum:");
		int sum=sc.nextInt();
		sumofsubset s=new sumofsubset(n, total, sum, w);
		s.compute(0,1,total);
	}

}




import java.util.*;
public class tsp 
{
	int n;
	int cost[][];
	public tsp(int n,int cost[][])
	{
		this.n=n;
		this.cost=cost;
	}
	int tp(int path[],int start)
	{
		int ccost;
		int mintour[]=new int[n+1];
		int temp[]=new int[n+1];
		if(start==n-1)
		{
			return cost[path[n-1]][path[n]]+cost[path[n]][1];
		}
		int mincost=999;
		for(int i=start+1;i<=n;i++)
		{
			for(int j=1;j<=n;j++)
			{
				temp[j]=path[j];
			}
			temp[start+1]=path[i];
			temp[i]=path[start+1];
			if(cost[path[start]][path[i]]+(ccost=tp(temp,start+1))<mincost)
			{
				mincost=cost[path[start]][path[i]]+ccost;
				for(int k=1;k<=n;k++)
				{
					mintour[k]=temp[k];
				}
			}
		}
		for(int k=1;k<=n;k++)
		{
			path[k]=mintour[k];
		}
		return mincost;
	}

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("Enetr vertex:");
		int n=sc.nextInt();
		int cost[][]=new int[n+1][n+1];
		int path[]=new int[n+1];
		for(int i=1;i<=n;i++)
		{
			for(int j=1;j<=n;j++)
			{
				cost[i][j]=sc.nextInt();
			}
		}
		for(int i=1;i<=n;i++)
		{
			path[i]=i;
		}
		tsp t=new tsp(n,cost);
		int min=t.tp(path,1);
		System.out.print("tsp ");
		for(int i=1;i<=n;i++)
		{
			System.out.print(path[i]+"--->");
		}
		System.out.println("1");
		System.out.println(min);
	}

}




import java.util.Scanner;

public class nqueen {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter size of board:");
		int n=sc.nextInt();
		nqueen q=new nqueen();
		q.solveNqueen(n);
	}
	void solveNqueen(int n) {
		int b[][]=new int[n][n];
		if(solve(b,0,n))
		{
			printboard(b,n);
		}
		else {
			System.out.println("no solutin exit");
		}
	}
	boolean solve(int b[][],int col,int n)
	{
		if(col>=n)
		{
			return true;
		}
		for(int i=0;i<n;i++)
		{
			if(isSafe(b,i,col,n))
			{
				b[i][col]=1;
				if(solve(b,col+1,n))
				{
					//System.out.println("the");
					return true;
				}
				b[i][col]=0;
			}
		}
		return false;
	}
	boolean isSafe(int b[][],int row,int col,int n)
	{
		int i,j;
		for(i=0;i<col;i++)
		{
			if(b[row][i]==1)
			{
				return false;
			}
		}
		for(i=row,j=col;i>=0&&j>=0;i--,j--)
		{
			if(b[i][j]==1)
			{
				return false;
			}
		}
		for(i=row,j=col;i<n&&j>=0;i++,j--)
		{
			if(b[i][j]==1)
			{
				return false;
			}
		}
		return true;
	}
	void printboard(int b[][],int n)
	{
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
			{
				System.out.print(b[i][j]+" ");
			}
			System.out.println();
		}
	}
}



import java.util.*;
public class tsp 
{
	int n;
	int cost[][];
	public tsp(int n,int cost[][])
	{
		this.n=n;
		this.cost=cost;
	}
	int tp(int path[],int start)
	{
		int ccost;
		int mintour[]=new int[n+1];
		int temp[]=new int[n+1];
		if(start==n-1)
		{
			return cost[path[n-1]][path[n]]+cost[path[n]][1];
		}
		int mincost=999;
		for(int i=start+1;i<=n;i++)
		{
			for(int j=1;j<=n;j++)
			{
				temp[j]=path[j];
			}
			temp[start+1]=path[i];
			temp[i]=path[start+1];
			if(cost[path[start]][path[i]]+(ccost=tp(temp,start+1))<mincost)
			{
				mincost=cost[path[start]][path[i]]+ccost;
				for(int k=1;k<=n;k++)
				{
					mintour[k]=temp[k];
				}
			}
		}
		for(int k=1;k<=n;k++)
		{
			path[k]=mintour[k];
		}
		return mincost;
	}

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("Enetr vertex:");
		int n=sc.nextInt();
		int cost[][]=new int[n+1][n+1];
		int path[]=new int[n+1];
		for(int i=1;i<=n;i++)
		{
			for(int j=1;j<=n;j++)
			{
				cost[i][j]=sc.nextInt();
			}
		}
		for(int i=1;i<=n;i++)
		{
			path[i]=i;
		}
		tsp t=new tsp(n,cost);
		int min=t.tp(path,1);
		System.out.print("tsp ");
		for(int i=1;i<=n;i++)
		{
			System.out.print(path[i]+"--->");
		}
		System.out.println("1");
		System.out.println(min);
	}

}




import java.util.*;
public class hamilton {
	int n;
	int v[][],path[];
	public hamilton(int n, int[][] v) {
		this.n=n;
		this.v=v;
		path=new int[n];
		path[0]=0;
	}
	void solve()
	{
		if(solution(1))
		{
			display();
		}
		else
		{
			System.out.println("not solution");
		}
	}
	boolean solution(int pos)
	{
		if(pos==n)
		{
			if(v[path[pos-1]][path[0]]==1)
			{
				return true;
			}
			else {
				return false;
			}
		}
		for(int i=1;i<n;i++)
		{
			if(issafe(i,pos))
			{
				path[pos]=i;
				if(solution(pos+1))
				{
					return true;
				}
			}
		}
		return false;
	}
	boolean issafe(int i,int pos)
	{
		if(v[path[pos-1]][i]==0)
		{
			return false;
		}
		for(int j=0;j<pos;j++)
		{
			if(path[j]==1)
			{
				return false;
			}
		}
		return true;
	}
	void display()
	{
		for(int i=0;i<n;i++)
		{
			System.out.print(path[i]+"--->");
		}
		System.out.println(path[0]);
	}
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter no of vertex:");
		int n=sc.nextInt();
		int v[][]=new int[n][n];
		for(int i=0;i<n;i++) {
			for(int j=0;j<n;j++)
			{
				v[i][j]=sc.nextInt();
			}
		}
		hamilton t=new hamilton(n,v);
		t.solve();
	}

}


multigraph


dist(k,{i})=min(cost(i,j)+dist(k+1,j)}
forward/back


travllingsalesperson


g(i,{s})=min(c(i,j)+g(j,{s}-j))




m1=a11+a22*b11*b22
m2=a21+a22*b11
m3=a11*b12-b22
m4=a22*b21-b11
m5=a11+a12*b22
m6=a21-a11*b11+b12
m7=a12-a22*b21+b22

C11 = M1 + M4 - M5 + M7
C12 = M3 + M5
C21 = M2 + M4
C22 = M1 - M2 + M3 + M6





